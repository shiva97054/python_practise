List are to build in data structures storing and acessing objects with belongs in a specific sequence

There are two ways to ctreate lists 
1) example()
2)example[]



class stack:     //class defination //




def __init__(self):
    """Initialize an empty stack."""   //initialization method//
    self.items = []




def is_empty(self):
    """Check if the stack is empty."""   //checking the stock is empty or not//
    return len(self.items) == 0
    
    
    
    
    def push(self, item):
    """Add an integer to the top of the stack."""                    // push method//
    if isinstance(item, int):
        self.items.append(item)
    else:
        raise ValueError("Only integers can be pushed onto the stack.")





def pop(self):
    """Remove and return the top integer from the stack."""       //pod method//
    if self.is_empty():
        raise IndexError("Pop from an empty stack")
    return self.items.pop()




def peek(self):
    """Return the top integer without removing it."""           //peak method//
    if self.is_empty():
        raise IndexError("Peek from an empty stack")
    return self.items[-1]






class Stack:
    def __init__(self):
        self.items = []

    def is_empty(self):
        """Check if the stack is empty."""
        return len(self.items) == 0

    def push(self, item):
        """Add an item to the top of the stack."""
        self.items.append(item)

    def pop(self):
        """Remove and return the top item from the stack."""
        if self.is_empty():
            raise IndexError("Pop from an empty stack")
        return self.items.pop()

    def peek(self):
        """Return the top item without removing it."""
        if self.is_empty():
            raise IndexError("Peek from an empty stack")
        return self.items[-1]

    def size(self):
        """Return the number of items in the stack."""
        return len(self.items)

    def display(self):
        """Return the stack contents."""
        return self.items


# Example usage
if __name__ == "__main__":
    stack = Stack()

    # Push elements onto the stack
    stack.push(1)
    stack.push(2)
    stack.push(3)
    stack.push(4)
    stack.push(5)
    stack.push(6)

    print("Stack contents:", stack.display())
    print("Top element:", stack.peek())

    # Pop elements from the stack
    print("Popped element:", stack.pop())
    print("Stack after pop:", stack.display())
    print("Is stack empty?", stack.is_empty())
    stack.push(6)
    print("Stack contents:", stack.display())


